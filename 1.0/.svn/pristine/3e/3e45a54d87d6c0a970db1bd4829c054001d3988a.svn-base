/**
* Copyright © Alcatel Lucent 2015
* All rights reserved.
*
* Motive, Inc. Proprietary/Trade Secret ; Information
* Not to be disclosed or used except in accordance with applicable agreements.
*/

var MobileClientNetworkScan = function() {
	var initialized;
	// =========================================================================
	// Define the actual MobileClientNetworkScan instance constructor method.
	// =========================================================================
	return {

		/**
		 * Initializes the MobileClientNetworkScan
		 * @param mobileClientNetworkScanTestModule
		 * @param oMVP_OverlayTypeManager
		 */
		initialize: function(mobileClientNetworkScanTestModule, oMVP_OverlayTypeManager) {
			try {
				var mobileClientNetworkScanModel = oMVP_ModelManager.getModels().getModel(mobileClientNetworkScanTestModule);
				// Execute TM
				MobileClientNetworkScan.executeTestModule(mobileClientNetworkScanModel);
				var mobileClientNetworkScanTestListener = new Array();
				mobileClientNetworkScanTestListener.onStatusChange = MobileClientNetworkScan.onTestGroupStatusChange;

				//Add the model status listener
				mobileClientNetworkScanModel.addListener(mobileClientNetworkScanTestListener);
				initialized = true;
			}
			catch(e) {
				smc.Logger.error("MobileClientNetworkScan.initialize: " + e.message);
			}
			return true;
		},

		sizeIframe: function(section){
			var height = $(window).height() - section.position().top;
			console.log($('#northPane-networkMap').height()+' '+$('.ui-layout-center.ui-layout-pane.ui-layout-pane-center.open')[0].getBoundingClientRect().top);
			//section.css('height',height+'px');
		},

		appendContent: function(someObj){
			this.sizeIframe($('#mobileClientNetworkScanContainer'));
			var bestChannel,currentChannel,
				//content = '<tr><td colspan="5" style="padding:0"><div id="extra_1" class="deviceInfo" style="display:none"><div style="padding:0 0 10px 0"><h3>${msg.get("deviceinformation")}</h3><p>OS Type: xxxxxxx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OS Device : XXXxxx</p></div><div style="padding:0 0 10px 0"><h3>${msg.get("otherdetails")}</h3><p>Current Connected SSIO: XXXXXX</p><p>Current Signal Strength : xxxxxx</p></div></div></td></tr>',
				timestamps = someObj.timestamped_measurements,
				cpe = someObj.cpe_recommendations.cpe,
				room = someObj.room_recommendations.sessions,
				signalStrength = someObj.signal_strengths_by_location.locations,
				wifiRecommendations = someObj.wifi_recommendations;

					$('.added-row').remove();

					//load Timestamps
					for(e = 0; e < timestamps.length; e++){
						$('<tr class="table-items added-row"><td class="session">'+timestamps[e].sessionId+'</td><td class="timestamp">'+timestamps[e].timestamp+'</td><td class="room">'+timestamps[e].location+'</td></tr>').appendTo('#mobileClient-listsofSession table');
					}

					//load CPE
					for(l = 0; l < cpe.length; l++){
						currentChannel = [cpe[l].currentChannel2_4,cpe[l].currentChannel5].filter(Boolean).join();
						bestChannel = [cpe[l].bestChannel2_4,cpe[l].bestChannel5].filter(Boolean).join();
						$('<tr class="added-row"><td>'+(cpe[l].isGateway ? "Gateway" : "Extender")+'</td><td>'+bestChannel+'</td><td>'+cpe[l].bestSSID+'</td></tr>').appendTo('#cpe-recommendation table');
					}

					//load by Signal Strength
					for(n = 0; n < signalStrength.length; n++){
						//create rows
						if(!$('#scanResults table tr[data-room="'+signalStrength[n].name+'"]').length){
							$("#scanResults table").append("<tr class='added-row' data-room='"+signalStrength[n].name+"'><td>"+signalStrength[n].name+"</td></tr>");
						}

						if(!signalStrength[n].cpe_devices.length){
							$('#scanResults table tr[data-room="'+signalStrength[n].name+'"]').append('<td></td><td></td><td></td><td></td>');
						}

						for(t = 0; t < signalStrength[n].cpe_devices.length; t++){
							var signals = signalStrength[n].cpe_devices[t],
								className = (signals.managedDeviceId+'-'+signals.isGateway).replace('<HomeNetworkId>',''),
								gateway = signals.isGateway ? 'Gateway' : 'Extender';

								//create columns
								if(!$('.signals-header th[data-gateway="'+className+'"]').length){
									$('.signals-header').append('<th data-gateway="'+className+'">'+gateway+'('+signals.managedDeviceId+')</th>');
								}

								//create table data cells
								if(!$('tr[data-room="'+signalStrength[n].name+'"] td[data-gateway="'+className+'"]').length){
									$('#scanResults table tr[data-room="'+signalStrength[n].name+'"]').append('<td data-gateway="'+className+'">&nbsp;</td>');
								}

								//enter values
								$('tr[data-room="'+signalStrength[n].name+'"] td[data-gateway="'+className+'"]').html([signals.rssi2_4+'dBm',signals.rssi5+'dBm'].join());

							}
					}

					//load Content for Wifi and Room Recommendations
					function loadContentFor(session, timestamp, roomname){

						//clear html
						$('.room-row').remove();

						//load Room Recommendations
						for(o = 0; o < room.length; o++){
							if(room[o].sessionId === session && room[o].timestamp === timestamp){
								var location = room[o].locations;
								for(b = 0; b < location.length; b++){
									if(roomname === "" || location[b].name === roomname){
										$('<tr class="room-row"><td>'+location[b].name+'</td><td>'+(location[b].extenderRequired ? "<span class='recommended'>Insufficient coverage. Extender required </span>" : "")+'<br>'+(location[b].bestSSIDs ? "<b>Best SSID(s): </b>"+location[b].bestSSIDs : "")+'</td></tr>').appendTo('#room-recommendation table');
									}
								}
							}
						}

						//clear html
						$('.wifi-recommendations .signals, .wifi-recommendations .channel').html(' ');

						//load by Wifi Recommendations
						for(c = 0; c < wifiRecommendations.length; c++){
							if(wifiRecommendations[c].sessionId === session && wifiRecommendations[c].timestamp === timestamp){
								var locate = wifiRecommendations[c].locations;
								for(m = 0; m < locate.length; m++){
									if(roomname === "" || locate[m].name === roomname){
										var recommend = locate[m].recommendations,
											length = (recommend.length > 2) ? 2 : recommend.length;
										for(a = 0; a < length; a++){
											var pref = recommend[a].preferences;
											Object.getOwnPropertyNames(pref).forEach(function(val) {
												var row = (val < 36) ? '.row1' : '.row2';
												$('.wifi-recommendations .signals'+row).append('<td class="'+pref[val]+'"></td>');
												$('.wifi-recommendations .channel'+row).append('<td>'+val+'</td>');
											});
										}

									}
								}
							}
						}
					}


					//functions
					loadContentFor("household",0,"");

					//listeners
					$('.table-items').click(function() {
						$(this).addClass('active').siblings('tr').removeClass('active');
						var session = $(this).find('.session').text(),
							room = $(this).find('.room').text(),
							timestamp = parseInt($(this).find('.timestamp').text()) || 0;
						loadContentFor(session,timestamp,room);
						//$(this).next('tr').find('.deviceInfo').slideToggle("slow");
					});

					$('.refresh-sessions').click(function() {
						loadContentFor("household",0,"");
						$('.table-items.active').removeClass('active');
					});


		},

		/**
		 * executeTestModule
		 * @param Test module to run
		 * Executes the selected test module.
		 */
		executeTestModule: function(testModule) {
			try {
				if (testModule) {
					diagnosticsLogger.debug(testModule.getID() + " executed.");
					// Execute the selected test module.
					testModule.execute();
				}
			}
			catch (e) {
				smc.Logger.error("MobileClientNetworkScan.js::MobileClientNetworkScan.executeTestModule() - " + e.message);
			}
		},

		/**
		 * Status Change listener
		 *
		 * @param modelID - the ID of the model that has changed status.
		 * @param nOldStatus - a number representing the old status of the model.
		 *
		 * NONE = 10 STARTING = 20 IN_PROGRESS = 30 COMPLETE = 40 EXCEPTION = 50
		 * USERINPUT = 60
		 */

		onTestGroupStatusChange: function(modelID, nOldStatus) {
			try {
				var model = oMVP_ModelManager.getModels().getModel(modelID);
				var ot = oMVP_OverlayTypeManager.getOverlayTypeForModel(model);

				if (modelID == "HC-GetHALNetworkScanData") {
					if ( Model.Status.COMPLETE === model.getStatus() ) {
						smc.Logger.debug("MobileClientNetworkScan.onTestGroupStatusChange()::" + modelID + " --> COMPLETE");

						var result = MobileClientNetworkScan.getPropertyValue(model, "HALNetworkScanData");
						smc.Logger.debug("MobileClientNetworkScan.onTestGroupStatusChange():result +++++++++++ " + result);

						try {
							$("#dataLoadingDiv").hide();
							console.log('Result: '+result);
							MobileClientNetworkScan.appendContent(JSON.parse(result));
						}
						catch(e) {
							smc.Logger.error("MobileClientNetworkScan.parseJSON:MobileClientNetworkScan: " + e.message);
							MobileClientNetworkScan.displayDataErrorMessage();
						}
				    }
					// Test module did not complete
					if ( Model.Status.EXCEPTION === model.getStatus() ) {
						smc.Logger.debug("MobileClientNetworkScan.onTestGroupStatusChange()::" + modelID + " --> EXCEPTION");
					}
				}

			}
			catch(e) {
				smc.Logger.error("MobileClientNetworkScan.onTestGroupStatusChange: " + e.message);
			}
			return true;
		},

		/**
		 * Gets the property value from the model execution,
		 * or null if property does not exist
		 *
		 * @param model The model to get the property value from.
		 * @param propertyName Property name
		 */
		getPropertyValue: function(model, propertyName) {
			try{
				var resultXML = model.getResult();
				var propertyValue = null;
				if (resultXML == null) {
					return null;
				}
				var xmlDom = getDomAdapter().parseXml(resultXML);
				if (getDomAdapter().hasParseError(xmlDom)) {
					alert("An error occurred parsing the xmlDom.");
					return null;
				}
				var properties = xmlDom.selectSingleNode("//OverlayResults/Result[@name='properties']");
				if (properties) {
					var resultValue = properties.selectSingleNode("ResultValue");
					var propertyAttribute = "PropertyResult[@name='"+propertyName+"']";
					var propertyResult = resultValue.selectSingleNode(propertyAttribute);
					if (propertyResult) {
						propertyValue = propertyResult.selectSingleNode("value").childNodes[0].nodeValue;
					}
				}
				return propertyValue;
				}
				catch(e) {
					smc.Logger.error("MobileClientNetworkScan.getPropertyValue: " + e.message);
					return "";
				}
			},

		/**
		 * displayDataErrorMessage
		 * @param json object representing Data Error
		 **/
		displayDataErrorMessage: function() {
			var errMsg = "Error occurred during the operation."
			var errorMsgHtml = '<p style="text-align: center; line-height: 28px; font-size: 14px;">' + errMsg + '</p>';
			$("#dataLoadingDiv").hide();
			$("#errorMessage").html(errorMsgHtml);
		}
	};
} ();